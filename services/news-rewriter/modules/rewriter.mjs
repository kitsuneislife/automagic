import { OpenAI } from "openai";
import dotenv from "dotenv";
import { customAlphabet } from "nanoid";
import Database from "better-sqlite3";

// Configura√ß√£o do dotenv para carregar vari√°veis de ambiente
dotenv.config();

// Gerador de `globalId` √∫nico
const alphabet = 'abcdefghijklmnopqrstuvwxyz0123456789';
const nanoid = customAlphabet(alphabet, 16);

// Inst√¢ncia OpenAI configurada para a API ZukiJourney
const SYSTEM_PROMPT = `
Fale em portugu√™s brasileiro. Voc√™ √© um jornalista profissional, comprometido com a verdade, com o respeito e a democracia. 

Voc√™ receber√° um objeto JSON com informa√ß√µes de uma not√≠cia e, a partir dele, dever√° reescrever as not√≠cias em portugu√™s brasileiro. Deve conferir as fontes e as informa√ß√µes. 
Certifique-se de incluir contexto adicional, explica√ß√µes detalhadas, poss√≠veis impactos, e conex√µes relevantes. 
Estruture a not√≠cia de forma que ela seja clara, informativa e interessante para o p√∫blico. 

Use um tom jornal√≠stico e investigativo. Divida o conte√∫do em par√°grafos bem desenvolvidos e inclua respostas impl√≠citas √†s seguintes perguntas: 
"Quem est√° envolvido?", "O que aconteceu?", "Quando aconteceu?", "Onde aconteceu?", "Por que √© importante?" e "Como isso afeta o p√∫blico?"

Retorne APENAS o JSON com as seguintes informa√ß√µes:
{
    "title": "string",
    "description": "string",
    "content": "string"
}`;

const openai = new OpenAI({
    baseURL: "https://api.zukijourney.com/v1",
    apiKey: process.env.ZUKI_API_KEY,
});

// Fun√ß√£o para reescrever a not√≠cia usando a API OpenAI
const rewriteNews = async (originalNews) => {
    try {
        console.log("üü° Reescrevendo not√≠cia...");
        const prompt = JSON.stringify({
            title: originalNews.title,
            description: originalNews.description,
            content: originalNews.description, // Usando a descri√ß√£o como conte√∫do inicial
        });

        const response = await openai.chat.completions.create({
            model: "gpt-4o-mini:online",
            messages: [
                { role: "system", content: SYSTEM_PROMPT },
                { role: "user", content: prompt }
            ],
            response_format: { type: "json_object" }
        });

        const rewrittenContent = JSON.parse(response.choices[0].message.content);

        // Adicionar informa√ß√µes originais √† not√≠cia reescrita
        return {
            globalId: nanoid(), // Gerar um novo globalId
            title: rewrittenContent.title,
            description: rewrittenContent.description,
            content: rewrittenContent.content,
            url: originalNews.url,
            source: originalNews.source,
            publishedAt: originalNews.publishedAt,
        };
    } catch (error) {
        console.error("üî¥ Erro ao reescrever not√≠cia:", error.message);
        throw error;
    }
};

// Configura√ß√£o do banco de dados SQLite
class NewsDatabase {
    constructor() {
        this.db = new Database('./public/sqlite/system.db');
        this.initializeDatabase();
    }

    initializeDatabase() {
        // Criar tabela para not√≠cias reescritas
        this.db.prepare(`
            CREATE TABLE IF NOT EXISTS news_rewritten (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                globalId TEXT NOT NULL UNIQUE,
                title TEXT NOT NULL,
                description TEXT NOT NULL,
                content TEXT NOT NULL,
                url TEXT NOT NULL,
                source TEXT NOT NULL,
                publishedAt TEXT NOT NULL,
                createdAt TEXT DEFAULT CURRENT_TIMESTAMP
            );
        `).run();
    }

    // Insere uma not√≠cia reescrita no banco de dados
    insertRewrittenNews(rewrittenNews) {
        const insert = this.db.prepare(`
            INSERT INTO rewritten_news (
                globalId, title, description, content, url, source, publishedAt
            ) VALUES (
                @globalId, @title, @description, @content, @url, @source, @publishedAt
            )
        `);

        return insert.run(rewrittenNews);
    }

    // Fecha a conex√£o com o banco de dados
    close() {
        this.db.close();
    }
}

// Inst√¢ncia √∫nica do banco de dados
const newsDatabase = new NewsDatabase();

// Fun√ß√£o para processar, reescrever e armazenar a not√≠cia
const processAndStoreRewrittenNews = async (originalNews) => {
    try {
        // Reescrever not√≠cia
        const rewrittenNews = await rewriteNews(originalNews);

        // Inserir not√≠cia reescrita no banco de dados
        const insertResult = newsDatabase.insertRewrittenNews(rewrittenNews);
        console.log("üü¢ Not√≠cia reescrita armazenada com sucesso!");

        return { rewritten: rewrittenNews, result: insertResult };
    } catch (error) {
        console.error("üî¥ Erro ao processar e armazenar not√≠cia reescrita:", error.message);
        throw error;
    }
};

// Encerramento da conex√£o com o banco de dados
const closeDatabase = () => {
    newsDatabase.close();
};

// Exporta as fun√ß√µes principais para uso
export {
    processAndStoreRewrittenNews,
    closeDatabase
};