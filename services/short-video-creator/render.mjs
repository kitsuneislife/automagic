import { bundle } from "@remotion/bundler";
import { renderMedia, selectComposition } from "@remotion/renderer";
import path from "path";
import fs from "fs/promises";
import { fileURLToPath } from "url";
import { customAlphabet } from "nanoid";
import Database from "better-sqlite3";

// ConfiguraÃ§Ã£o do banco de dados SQLite
const db = new Database(path.join(process.cwd(), "public", "sqlite", "system.db"));
const initializeVideoTable = () => {
  db.prepare(`
      CREATE TABLE IF NOT EXISTS videos (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          globalId TEXT NOT NULL UNIQUE,
          path TEXT NOT NULL,
          title TEXT NOT NULL,
          description TEXT,
          content TEXT,
          url TEXT NOT NULL,
          source TEXT,
          publishedAt TEXT,
          createdAt TEXT DEFAULT CURRENT_TIMESTAMP
      );
  `).run();
};
initializeVideoTable();

// Gerador de IDs globais Ãºnicos
const alphabet = "abcdefghijklmnopqrstuvwxyz0123456789";
const nanoid = customAlphabet(alphabet, 16);

// Suporte a __dirname em ES Modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/**
 * Salva o vÃ­deo no diretÃ³rio pÃºblico e insere os dados no banco de dados.
 * @param {string} globalId - ID global do vÃ­deo.
 * @param {string} outputPath - Caminho do arquivo gerado.
 * @param {Object} news - Objeto contendo informaÃ§Ãµes da notÃ­cia.
 */
const saveVideoToDatabase = async (globalId, outputPath, news) => {
  try {
    console.log("ðŸŸ¡ Salvando vÃ­deo e registrando no banco de dados...");

    // Caminho pÃºblico
    const publicPath = `/public/videos/${globalId}.mp4`;

    // Mover o vÃ­deo gerado para o diretÃ³rio pÃºblico
    const finalPath = path.join(process.cwd(), "public", "videos", `${globalId}.mp4`);
    await fs.rename(outputPath, finalPath);
    console.log(`ðŸŸ¢ VÃ­deo salvo com sucesso no caminho: ${finalPath}`);

    // Inserir os dados no banco de dados
    const insertVideo = db.prepare(`
      INSERT INTO videos (
        globalId, path, title, description, content, url, source, publishedAt, createdAt
      ) VALUES (
        @globalId, @path, @title, @description, @content, @url, @source, @publishedAt, CURRENT_TIMESTAMP
      )
    `);

    insertVideo.run({
      globalId,
      path: publicPath,
      title: news.title,
      description: news.description,
      content: news.content,
      url: news.url,
      source: news.source,
      publishedAt: news.publishedAt,
    });

    console.log(`ðŸŸ¢ Dados do vÃ­deo foram inseridos no banco de dados para globalId: ${globalId}`);
  } catch (error) {
    console.error("ðŸ”´ Erro ao salvar vÃ­deo e registrar no banco de dados:", error.message);
    throw error;
  }
};

/**
 * Renderiza um vÃ­deo final com base em uma composiÃ§Ã£o do Remotion.
 * @param {string} entryFile - Caminho do arquivo de entrada Remotion (ex.: "Remotion.tsx").
 * @param {string} compositionId - ID da composiÃ§Ã£o a ser renderizada (ex.: "CaptionedVideo").
 * @param {Object} news - Objeto contendo informaÃ§Ãµes da notÃ­cia.
 */
export const renderVideo = async (entryFile, compositionId, news) => {
  try {
    console.log("ðŸ“¦ Criando bundle para o Remotion...");
    const bundleUrl = await bundle({ entryPoint: entryFile });

    console.log("ðŸŽ¬ Selecionando composiÃ§Ã£o...");
    const composition = await selectComposition({
      serveUrl: bundleUrl,
      id: compositionId,
    });

    console.log("ðŸŽ¥ Renderizando vÃ­deo...");
    const globalId = nanoid(); // Gerar ID global para o vÃ­deo
    const tempOutputPath = path.join(__dirname, `${globalId}.mp4`);

    await renderMedia({
      serveUrl: bundleUrl,
      composition,
      codec: "h264", // Codec padrÃ£o para vÃ­deos MP4
      outputLocation: tempOutputPath,
    });

    console.log("âœ… VÃ­deo renderizado com sucesso em:", tempOutputPath);

    // Salvar o vÃ­deo no banco de dados
    await saveVideoToDatabase(globalId, tempOutputPath, news);
  } catch (error) {
    console.error("ðŸ”´ Erro ao renderizar vÃ­deo:", error.message);
    throw error;
  }
};