import { OpenAI } from "openai";
import { promises as fs } from "fs";
import path from "path";
import dotenv from "dotenv";

// Carregar vari√°veis de ambiente
dotenv.config();

// Valida√ß√£o de vari√°veis de ambiente
if (!process.env.ZUKI_API_KEY) {
  throw new Error("A vari√°vel de ambiente ZUKI_API_KEY n√£o foi definida!");
}

// Configura√ß√£o do cliente OpenAI
const openai = new OpenAI({
  baseURL: "https://api.zukijourney.com/v1",
  apiKey: process.env.ZUKI_API_KEY,
});

// Constantes para o modelo e voz
const VOICE = "alloy"; // Op√ß√µes: alloy, echo, nova, shimmer
const MODEL = "gpt-4o-mini-tts"; // Op√ß√µes: tts-1, gpt-4o-mini-tts

/**
 * Fun√ß√£o para gerar a s√≠ntese de √°udio.
 * @param {string} text - Texto de entrada para a s√≠ntese.
 * @param {string} [outputPath="services/video/temp/audio.mp3"] - Caminho para salvar o arquivo de √°udio.
 * @returns {Promise<string>} - Caminho do arquivo gerado.
 */
export const Synthesis = async (text, outputPath = "services/video/temp/audio.mp3") => {
  try {
    console.log("üéôÔ∏è Iniciando s√≠ntese de √°udio...");

    // Gerar √°udio usando a API OpenAI
    const response = await openai.audio.speech.create({
      model: MODEL,
      voice: VOICE,
      input: text,
    });

    // Salvar arquivo no sistema
    const fullPath = path.resolve(outputPath);
    const buffer = Buffer.from(await response.arrayBuffer());

    await fs.mkdir(path.dirname(fullPath), { recursive: true });
    await fs.writeFile(fullPath, buffer);

    // Verificar se o arquivo foi salvo corretamente
    const fileExists = await fs.access(fullPath).then(() => true).catch(() => false);
    if (!fileExists) {
      throw new Error("Falha ao salvar o arquivo de √°udio.");
    }

    console.log(`‚úÖ √Åudio salvo com sucesso: ${fullPath}`);
    return fullPath;
  } catch (error) {
    console.error("Erro ao gerar √°udio:", error);
    throw error;
  }
};